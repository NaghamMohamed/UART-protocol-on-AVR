
Uart_transmit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000cc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000120  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000048  00000000  00000000  00000150  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001cf  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000175  00000000  00000000  00000367  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001a5  00000000  00000000  000004dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000058  00000000  00000000  00000684  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000159  00000000  00000000  000006dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000003a  00000000  00000000  00000835  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000028  00000000  00000000  0000086f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4e 00 	call	0x9c	; 0x9c <main>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Convert_single>:
#include"ADC.h"
#include <avr/io.h> 
unsigned int Convert_single(unsigned char ch)
{
	union data data;
	if(ch>7)
  6c:	88 30       	cpi	r24, 0x08	; 8
  6e:	48 f4       	brcc	.+18     	; 0x82 <Convert_single+0x16>
	{
		return 0;
	}
	ADMUX|=ch;
  70:	97 b1       	in	r25, 0x07	; 7
  72:	89 2b       	or	r24, r25
  74:	87 b9       	out	0x07, r24	; 7
	ADCSRA|=(1<<6);   //start conversion
  76:	36 9a       	sbi	0x06, 6	; 6
	while( ( ADCSRA&(0x10) )==0 );   //keep looping until conversion completes
  78:	34 9b       	sbis	0x06, 4	; 6
  7a:	fe cf       	rjmp	.-4      	; 0x78 <Convert_single+0xc>
	if(precision)
	{
		return ADCH;
  7c:	85 b1       	in	r24, 0x05	; 5
  7e:	90 e0       	ldi	r25, 0x00	; 0
  80:	08 95       	ret
unsigned int Convert_single(unsigned char ch)
{
	union data data;
	if(ch>7)
	{
		return 0;
  82:	80 e0       	ldi	r24, 0x00	; 0
  84:	90 e0       	ldi	r25, 0x00	; 0
		return ADCH;
	}
    data.data[0]=ADCL;
	data.data[1]=ADCH;
	return data.da;
}
  86:	08 95       	ret

00000088 <ADC_enable>:

void ADC_enable(void)
{
	ADMUX=( (ADMUX&~(precision_field))|precision );
  88:	3d 9a       	sbi	0x07, 5	; 7
	ADCSRA=( (ADCSRA&~(prescalar_field))|prescalar );
  8a:	86 b1       	in	r24, 0x06	; 6
  8c:	83 60       	ori	r24, 0x03	; 3
  8e:	86 b9       	out	0x06, r24	; 6
	ADMUX=( (ADMUX&~(reference_field))|reference );
  90:	87 b1       	in	r24, 0x07	; 7
  92:	8f 73       	andi	r24, 0x3F	; 63
  94:	80 64       	ori	r24, 0x40	; 64
  96:	87 b9       	out	0x07, r24	; 7
	ADCSRA|=(1<<7);  //enable ADC module
  98:	37 9a       	sbi	0x06, 7	; 6
  9a:	08 95       	ret

0000009c <main>:
#include <avr/io.h>
#include"ADC/ADC.h"

int main(void)
{
	ADC_enable();
  9c:	0e 94 44 00 	call	0x88	; 0x88 <ADC_enable>
	UCSRC|=(1<<7);	//to enable writing to UCSRC register
  a0:	80 b5       	in	r24, 0x20	; 32
  a2:	80 68       	ori	r24, 0x80	; 128
  a4:	80 bd       	out	0x20, r24	; 32
	UCSRB|=(1<<3);	//enable UART transmitter
  a6:	53 9a       	sbi	0x0a, 3	; 10
	UCSRC|=(3<<1);	//character size = 8 bits
  a8:	80 b5       	in	r24, 0x20	; 32
  aa:	86 60       	ori	r24, 0x06	; 6
  ac:	80 bd       	out	0x20, r24	; 32
	UBRRL=12;		//4800 byte for 1 MHZ
  ae:	8c e0       	ldi	r24, 0x0C	; 12
  b0:	89 b9       	out	0x09, r24	; 9
	DDRC=0xff;
  b2:	8f ef       	ldi	r24, 0xFF	; 255
  b4:	84 bb       	out	0x14, r24	; 20
	DDRB=0xff;
  b6:	87 bb       	out	0x17, r24	; 23
	unsigned int data;
    while(1)
    {
		 data=Convert_single(0);
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	0e 94 36 00 	call	0x6c	; 0x6c <Convert_single>
         while( ( UCSRA & (1<<5) )==0 );             //polling data register empty flag in(UCSRA) before writing to UDR register
  be:	5d 9b       	sbis	0x0b, 5	; 11
  c0:	fe cf       	rjmp	.-4      	; 0xbe <main+0x22>
		 UDR=data;
  c2:	8c b9       	out	0x0c, r24	; 12
		 PORTC=data;
  c4:	85 bb       	out	0x15, r24	; 21
    }
  c6:	f8 cf       	rjmp	.-16     	; 0xb8 <main+0x1c>

000000c8 <_exit>:
  c8:	f8 94       	cli

000000ca <__stop_program>:
  ca:	ff cf       	rjmp	.-2      	; 0xca <__stop_program>
