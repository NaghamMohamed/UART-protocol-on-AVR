
uart_receive.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000000fa  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  0000012a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000b2  00000000  00000000  0000014a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000064  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000c2  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000024  00000000  00000000  00000324  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000136  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000010  00000000  00000000  0000047e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 36       	cpi	r26, 0x60	; 96
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 51 00 	jmp	0xa2	; 0xa2 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
unsigned char flag;
//#include "URT driver/USART.h"
#define BAUD 4800
int main(void)
{
	UCSRC|=(1<<7);	//to enable writing to UCSRC register
  7c:	80 b5       	in	r24, 0x20	; 32
  7e:	80 68       	ori	r24, 0x80	; 128
  80:	80 bd       	out	0x20, r24	; 32
	UCSRB|=(1<<4);	//enable UART receiver
  82:	54 9a       	sbi	0x0a, 4	; 10
	UCSRC|=(3<<1);	//character size = 8 bits
  84:	80 b5       	in	r24, 0x20	; 32
  86:	86 60       	ori	r24, 0x06	; 6
  88:	80 bd       	out	0x20, r24	; 32
	UCSRB|=(1<<7);	//enable receive interrupt flag
  8a:	57 9a       	sbi	0x0a, 7	; 10
	UBRRL=(F_CPU/((long)16*BAUD))-1;		//4800 byte for 1 MHZ
  8c:	8c e0       	ldi	r24, 0x0C	; 12
  8e:	89 b9       	out	0x09, r24	; 9
	
	DDRA=0xff;
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	8a bb       	out	0x1a, r24	; 26
	sei();
  94:	78 94       	sei
	DDRB=0xff;
  96:	87 bb       	out	0x17, r24	; 23
		 {
			 flag=0;
			 PORTA=mailbox;			 			 
		 }
		 PORTB=0xff;*/
		 while((UCSRA&(1<<7))==0);
  98:	5f 9b       	sbis	0x0b, 7	; 11
  9a:	fe cf       	rjmp	.-4      	; 0x98 <main+0x1c>
		 PORTC=UDR	;
  9c:	8c b1       	in	r24, 0x0c	; 12
  9e:	85 bb       	out	0x15, r24	; 21
    
}
  a0:	fb cf       	rjmp	.-10     	; 0x98 <main+0x1c>

000000a2 <_exit>:
  a2:	f8 94       	cli

000000a4 <__stop_program>:
  a4:	ff cf       	rjmp	.-2      	; 0xa4 <__stop_program>
